apply plugin: 'android'
apply plugin: 'spoon'
//Depends on the android and spoon plugins so it must be applied after them
apply plugin: 'ribot-android'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:0.9.+'
    }
}

dependencies {
    // App dependencies
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    compile 'com.android.support:support-v4:19.+'
    compile 'com.squareup.retrofit:retrofit:1.2.+'
    compile 'com.squareup.okhttp:okhttp:1.5.+'
    compile 'com.jakewharton:butterknife:4.0.+'

    // Test dependencies
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.+'
    androidTestCompile 'com.squareup.spoon:spoon-client:1.+'
}

android {

    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
        packageName "uk.co.ribot.androidwear"

        testPackageName "uk.co.ribot.androidwear.test"
        testInstrumentationRunner "uk.co.ribot.androidwear.test.InstrumentationTestRunner"
    }

    // TODO Add correct signing values for your project.
    signingConfigs {
        release {
            storeFile file("../project.keystore")
            keyAlias ""
            storePassword ""
            keyPassword ""
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }

        debug {
            versionNameSuffix " Debug"
        }
    }

}

/** Uncomment if you want large heap to be anabled during CI task
 *  This may avoid crashes because of OutOfMemoryError due to screenshots.
 *
 * ci {
 *    largeHeap = true
 * }
 *
**/

spoon {
    if (project.hasProperty('test')) {
        def values = project.test.split(':')
        className = "${android.defaultConfig.testPackageName}.${values[0]}"
        if (values.size() > 1) {
            methodName = values[1]
        }
    }

    debug = true
    noAnimations = true
}

/** Uncomment if your project contains submodules
 * task initSubmodule(type: Exec) {
 *    description = "Initialise and update git submodules"
 *    commandLine "git", "submodule", "update", "--init"
 * }
**/
